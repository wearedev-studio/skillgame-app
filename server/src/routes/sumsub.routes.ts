import { Router } from 'express';
import express from 'express';
import {
    getSumsubAccessToken,
    getSumsubVerificationStatus,
    handleSumsubWebhook,
    getSumsubApplicantInfo,
    syncSumsubStatus
} from '../controllers/sumsub.controller';
import { protect } from '../middleware/auth.middleware';
import { adminProtect } from '../middleware/admin.middleware';
import User from '../models/User.model';

const router = Router();

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ—É—Ç—ã
router.route('/access-token').get(protect, getSumsubAccessToken);
router.route('/verification-status').get(protect, getSumsubVerificationStatus);

// Mock KYC submission route –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
router.post('/mock-submission', protect, async (req, res) => {
    try {
        const {
            kycProvider,
            kycStatus,
            mockMode,
            applicantId,
            documents,
            documentType,
            filesCount
        } = req.body;

        console.log('üì• Received mock KYC submission:', {
            userId: (req as any).user.id,
            applicantId,
            documentsCount: documents?.length || 0
        });

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById((req as any).user.id);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // –°–æ–∑–¥–∞–µ–º mock –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const mockDocuments = documents.map((doc: any) => ({
            documentType: doc.documentType,
            filePath: `mock/${applicantId}/${doc.fileName}`,
            submittedAt: new Date(),
            mockData: true
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å KYC –¥–∞–Ω–Ω—ã–º–∏
        const updateData = {
            kycStatus: kycStatus || 'PENDING',
            kycProvider: 'SUMSUB',
            kycDocuments: mockDocuments,
            sumsubApplicantId: applicantId,
            sumsubProvider: 'SUMSUB',
            sumsubStatus: 'PENDING',
            sumsubData: {
                applicantId: applicantId,
                externalUserId: (req as any).user.id,
                mockMode: true,
                reviewStatus: 'pending',
                submittedAt: new Date(),
                documents: mockDocuments
            }
        };

        await User.findByIdAndUpdate((req as any).user.id, updateData, { new: true });

        console.log('‚úÖ Mock KYC submission saved for user:', (req as any).user.id);

        res.json({
            success: true,
            message: 'Mock KYC submission saved successfully',
            applicantId: applicantId,
            status: 'PENDING',
            documents: mockDocuments
        });

    } catch (error: any) {
        console.error('‚ùå Error saving mock KYC submission:', error);
        res.status(500).json({
            success: false,
            message: 'Failed to save mock KYC submission',
            error: error.message
        });
    }
});

// Webhook —Ä–æ—É—Ç (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å)
// –ò—Å–ø–æ–ª—å–∑—É–µ–º raw body –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
router.route('/webhook').post(
    express.raw({ type: 'application/json' }),
    handleSumsubWebhook
);

// –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã
router.route('/admin/applicant/:userId').get(adminProtect, getSumsubApplicantInfo);
router.route('/admin/sync/:userId').post(adminProtect, syncSumsubStatus);

export default router;